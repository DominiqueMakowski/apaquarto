```{r}
#| include: false
#| label: apasetup
options(tidyverse.quiet = TRUE)
library(conflicted)
library(tidyverse)
library(flextable)
library(ftExtra)
library(officer)
conflicts_prefer(dplyr::filter, .quiet = TRUE)
conflicts_prefer(flextable::separate_header, .quiet = TRUE)


knitr::knit_hooks$set(
  `apa-figtab` = function(before, options) {
    # Check if APA Figure or APA Table
    if (str_starts(options$label, pattern = "apafg-") |
        str_starts(options$label, pattern = "apatb-")) {
      # Figure or Table
      apatype <- ifelse(
        str_starts(as.character(options$label)[1], 
                   pattern = "apafg-"),
        "Figure", 
        "Table"
        )
      
      temp_label <- knitr::opts_current$get("label")
      

      
      


      # Format Before Chunk
      if (before) {
        knitr::opts_current$set(label = NULL, output = "asis")
        options$output <- "asis"

        pre <-
          paste0(
            '\n\n:::{#',
            options$label,
            ' .FigureTitle}\n\n{',
            options$label,
            '}\n\n:::\n\n'
          )
        
        if (!is.null(options$`apa-cap`)) {
          pre <- paste0(
            pre,
            '\n\n:::{.Caption}\n\n',
            options$`apa-cap`,
            '\n\n:::\n\n'
          )
        } else
          stop(
            paste0(
              "Chunk ",
              options$label,
              "is an APA figure/table chunk,  requires a caption. Set the `apa-cap` chunk option like so\n#| apa-cap: My caption"
            )
          )
        if (!all(is.null(options$`apa-note`))) {
        pre <- paste0(pre,'\n\n:::{.FigureWithNote}\n\n')
        
      } else {
        pre <- paste0(pre,'\n\n:::{.FigureWithoutNote}\n\n')
      }
      }
      else {
        knitr::opts_current$set(label = temp_label)
        post <- "\n\n:::\n\n"
        
        if (!all(is.null(options$`apa-note`))) {
          post <- paste(
            post,
            '\n\n:::{.FigureNote custom-style="FigureNote"}\n*Note*. ',
            options$`apa-note`,
            '\n:::\n'
          )
        } else if (apatype == "Table") {
          post <- paste0(post, '\n\n:::{custom-style="Body Text"}\n<br>\n:::')
        }
        
        # post <- paste0(post, "\n\n:::\n\n")
        post
        
        
      }
    }
    
  }
)


# write_rds(rmarkdown::metadata$author, file = "authors.rds")
if (interactive()) {
  yml_metadata <- rmarkdown::yaml_front_matter("template.qmd")
} else {
  yml_metadata <- rmarkdown::metadata
}

# quarto::quarto_inspect("template.qmd")

d_author_affiliations <-
  yml_metadata$author |> 
   map(\(x) if (is.character(x) & length(x) == 1) {
     list(name = x)
     } else {
      
     if (is.null(x$affiliations)) {
       x
     } else {
       if (is.character(x$affiliations) & length(x$affiliations) == 1) {
         x$affiliations <- list(name = x$affiliations)
         x
       } else {
         x
       }
     }
   }) %>% 
   map_df(as_tibble) %>% 
    mutate(affiliations = map(affiliations, \(x) if (is.character(x) & length(x) == 1) list(affiliations = x) else x)) %>% 
    bind_rows(
      tibble(
        id = character(0),
        number = integer(0),
        name = character(0),
        url = character(0),
        email = character(0),
        affiliations = list(0),
        fax = character(0),
        orcid = character(0),
        note = character(0),
        acknowledgements = character(0),
        corresponding = logical(0),
        `equal-contributor` = logical(0),
        deceased = logical(0))
    ) %>% 
   rename(author = name,
          author_number = number,
          author_url = url) |>
  nest(.by = author) %>% 
  mutate(author_id = row_number(), .before = 1L) %>% 
  unnest(data) %>% 
  mutate(author_row = row_number(), .by = author) %>% 
  mutate(affiliations = map(affiliations, enframe)) |> 
  unnest(affiliations) %>% 
   mutate(value = as.character(value),
          name = factor(name, 
                        levels = c("id", 
                                   "affiliations",
                                   "number",
                                   "name",
                                   "department",
                                   "address", 
                                   "city", 
                                   "region", 
                                   "postal-code", 
                                   "country",
                                   "url"))) |> 
   pivot_wider(names_expand = TRUE, names_prefix = "affiliations_") %>% 
    mutate(affiliations_name = ifelse(is.na(affiliations_name), affiliations_affiliations, affiliations_name)) %>% 
  unite(regioncode, affiliations_region, `affiliations_postal-code`, remove = F, sep = " ", na.rm = TRUE) %>% 
  unite(affiliations_default, affiliations_city, affiliations_region, affiliations_country, na.rm = TRUE, remove = F, sep = ", ") %>% 
  unite(mailing, affiliations_address, affiliations_city, regioncode, affiliations_country, sep = ", ", na.rm = TRUE) %>% 
  unite(affiliations, affiliations_department, affiliations_name, sep = ", ", na.rm = T) %>% 
  unique() %>% 
  nest(.by = affiliations) %>% 
  mutate(affiliations_row = row_number()) %>% 
  unnest(data) %>% 
  mutate(affs = paste0(affiliations_row, collapse = ","),.by = author) %>% 
  mutate(max_author = max(author_id, na.rm = TRUE),
         max_affiliations = max(affiliations_row,na.rm = TRUE),
         count_affs = length(unique(affs)),
         author_display = ifelse(count_affs == 1 | max_author == 1, author, paste0(author, "^",affs, "^")),
         affiliation = ifelse(
           is.na(affiliations) | affiliations == "",
           ifelse(
             is.na(affiliations_default) | affiliations_default == "",
             "Unaffiliated",
             affiliations_default
             ), 
           affiliations),
         affiliations_display = ifelse(count_affs == 1 | max_author == 1, affiliations, paste0("^",affiliations_row, "^", affiliations))) 

display_authors <- d_author_affiliations %>% 
  pull(author_display) %>% 
  unique() %>% 
  knitr::combine_words()

display_affiliations <- d_author_affiliations %>% 
  pull(affiliations_display) %>% 
  unique() %>% 
  paste0(collapse = "\n\n") 

if (all(c(display_authors, display_affiliations) == "")) {
  display_author_affiliations <- ""
} else {
  
  display_author_affiliations <- paste(
   "\n\n<br>\n\n:::{.Author}",
    display_authors,
    display_affiliations,
   ":::",
    sep = "\n\n"
  )
  
}


display_orcids <-  d_author_affiliations %>% 
  select(author, orcid) %>% 
  unique() %>% 
  filter(!orcid == "NULL") %>% 
  mutate(orcid_display = paste0(
    author, 
    " ![Orchid ID Logo: A green circle with white letters ID](_extensions/apaquarto/ORCID-iD_icon-vector.svg){width=16px} https://orcid.org/",
    orcid)) %>% 
  pull(orcid_display) %>% 
  unique() %>% 
  paste0(collapse = "\n\n")

display_corresponding_author <- d_author_affiliations %>% 
  filter(corresponding) %>% 
  slice(1) %>% 
  select(author, mailing, affiliation, email) %>% 
  mutate(email = ifelse(is.na(email), NA, paste0("Email: ", email)),
         mailing = ifelse(mailing == "", NA, mailing),
         corresponding_text = "Correspondence concerning this article should be addressed to ") %>% 
  unite(corresponding_text, corresponding_text, author, sep = " ", na.rm = T, remove = T) %>% 
   unite(corresponding_text, corresponding_text, affiliation, mailing, email, sep = ", ", na.rm = T, remove = T) %>% 
  pull(corresponding_text)


if (is.null(yml_metadata$`author-note`$`status-changes`)) {
  author_note_second_paragraph <- ""
} else {
  author_note_second_paragraph <-
  yml_metadata$`author-note`$`status-changes` %>%
  map(\(x) ifelse(is.null(x), NA, x)) %>%
  as_tibble() %>%
  unite(
    paragraph,
    everything(),
    sep = " ",
    remove = T,
    na.rm = T
  ) %>%
  pull(paragraph)
  
}


if (is.null(yml_metadata$`author-note`$disclosures)) {
  author_note_third_paragraph <- ""
} else {
author_note_third_paragraph <-
  yml_metadata$`author-note`$disclosures %>%
  map(\(x) ifelse(is.null(x), NA, x)) %>%
  as_tibble() %>%
  unite(
    paragraph,
    everything(),
    sep = " ",
    remove = T,
    na.rm = T
  ) %>%
  pull(paragraph)
  
}

if (is.null(yml_metadata$`author-note`$`blank-lines-above-author_note`)) {
  blanks <- 3
} else {
  blanks <- yml_metadata$`author-note`$`blank-lines-above-author_note`
}
  


if (all(c(display_orcids, 
          author_note_second_paragraph,
          author_note_third_paragraph,
          display_corresponding_author) == "")) {
  display_author_note <- ""
} else {
  display_author_note <- paste(
    paste0(rep("<br>", blanks), collapse = "\n\n"),
    ":::{.AuthorNote}",
    "# Author Note",
    display_orcids, 
    author_note_second_paragraph,
    author_note_third_paragraph,
    display_corresponding_author, 
    ":::",
    sep = "\n\n")
}


library(officer)
if (!is.null(yml_metadata$runningheader)) {
  running_header <- str_to_upper(yml_metadata$runningheader)
} else if (!is.null(yml_metadata$title)) {
  running_header <- str_to_upper(yml_metadata$title)
} else {
  running_header <- "SHORT TITLE"
}

if (is.null(yml_metadata$keywords)) {
  display_keywords <- NULL
} else {
  display_keywords <-  paste0("*Keywords*: ", paste0(yml_metadata$keywords, collapse = ", ")) 
    
}


paste(NULL)
read_docx("_extensions/apaquarto/apaquarto.docx") %>%
  headers_replace_all_text("Running Header", running_header) %>%
  print("apa_processed.docx")



```

# {{< meta title >}}

`r display_author_affiliations`

`r display_author_note`

{{< pagebreak >}}

:::{.Abstract}

# Abstract

{{< meta abstract >}}

`r display_keywords`
:::

{{< pagebreak >}}


# {{< meta title >}}